!------------------------------------------------------------------------------
! Generic for 2D sync routine:
! subroutine syncborder_data2D_TYPE(domain, data2d)
!        type(data2D_real8_type), intent(inout) :: data2d
!        type(domain_type), intent(in) :: domain
!        ...
! end subroutine
!
! Must be specified: 
!   _MPI_TYPE_
!
!------------------------------------------------------------------------------

integer :: reqst
integer :: dir, k, kk, i, ierr
integer :: sync_dir(8)
integer :: rank_dir(8)
integer :: hnxs, hnxe, hnys, hnye ! Halo points
integer :: buf_size
integer :: rk                     ! Local index of buffers for rank, see sync_map_rank
integer :: val

real(wp8) :: t_local

!$omp master

! Wait all
!

call start_timer(t_local)

if (sync_tag == 1) then
    if (mpp_max_count_sync_send_recv == 0) mpp_max_count_sync_send_recv = sync_count_send_recv
    if (mpp_min_count_sync_send_recv == 0) mpp_min_count_sync_send_recv = sync_count_send_recv

    if (mpp_max_count_sync_send_recv < sync_count_send_recv) mpp_max_count_sync_send_recv = sync_count_send_recv
    if (mpp_min_count_sync_send_recv > sync_count_send_recv) mpp_min_count_sync_send_recv = sync_count_send_recv

    call mpi_waitall(sync_count_send_recv, sync_requests, sync_statuses, ierr)
    sync_count_send_recv = 0
endif

call end_timer(t_local)
mpp_time_sync_wait = mpp_time_sync_wait + t_local


! Unpack MPI buffers
!

call start_timer(t_local)

if (.not. sync_is_fully_init) then
    sync_recv_buf_pos = 0
    do rk = 1, domain%amount_of_ranks_near
        i = 1
        do while (i <= sync_buf_size(rk))
            ! Unpack direction and block number and create sync pos buffer from it
            val = int(_SYNC_RECV_BUF_(i, rk, sync_tag))
            k = val / 10
            dir = MOD(val, 10)
            sync_recv_buf_pos(dir, k) = sync_recv_buf_pos(dir, k) + i
            i = i + 1
            
            !dir = _SYNC_RECV_BUF_(i, rk, sync_tag)
            !i = i + 1
            !k = _SYNC_RECV_BUF_(i, rk, sync_tag)
            !i = i + 1

            call get_halo_points_of_block(domain, k, dir, hnxs, hnxe, hnys, hnye)
            buf_size = (hnxe - hnxs + 1)*(hnye - hnys + 1)
            i = i + buf_size
        end do
    enddo
    sync_is_fully_init = .true.
endif

!$omp end master

!$omp barrier

!$omp do private(i, val, k, kk, rk, buf_size, sync_dir, rank_dir, hnxs, hnxe, hnys, hnye) schedule(static, 1)
do k = domain%start_boundary, domain%start_boundary + domain%bcount_boundary - 1

    sync_dir(1) = _NXP_; rank_dir(1) = domain%blocks_info(k)%rank_nxp
    sync_dir(2) = _NXM_; rank_dir(2) = domain%blocks_info(k)%rank_nxm
    sync_dir(3) = _NYP_; rank_dir(3) = domain%blocks_info(k)%rank_nyp
    sync_dir(4) = _NYM_; rank_dir(4) = domain%blocks_info(k)%rank_nym

    sync_dir(5) = _NXP_NYP_; rank_dir(5) = domain%blocks_info(k)%rank_nxp_nyp
    sync_dir(6) = _NXP_NYM_; rank_dir(6) = domain%blocks_info(k)%rank_nxp_nym
    sync_dir(7) = _NXM_NYP_; rank_dir(7) = domain%blocks_info(k)%rank_nxm_nyp
    sync_dir(8) = _NXM_NYM_; rank_dir(8) = domain%blocks_info(k)%rank_nxm_nym

    do kk = 1, 8
        ! Get rank of proc (rk) for transfer in current direction. It is near rank.
        if (rank_dir(kk) >= 0) then
            if (rank_dir(kk) /= mpp_rank) then
                rk = sync_map_rank(rank_dir(kk))
                i = sync_recv_buf_pos(kk, k)

                ! Unpack direction and block number for check
                val = int(_SYNC_RECV_BUF_(i, rk, sync_tag))
                if ( (val / 10) /= k ) call abort_model("Error in unpack MPI buffers, incorrect val in buffer")
                if ( MOD(val, 10) /= sync_dir(kk) ) call abort_model("Error in unpack MPI buffers, incorrect dir in buffer")

                ! Get halo area
                call get_halo_points_of_block(domain, k, sync_dir(kk), hnxs, hnxe, hnys, hnye)
                ! Unpack buffer
                buf_size = (hnxe - hnxs + 1)*(hnye - hnys + 1)
                
                data2d%block(k)%field(hnxs : hnxe, hnys : hnye) = reshape(_SYNC_RECV_BUF_(i + 1 : i + buf_size, rk, sync_tag), shape=(/hnxe - hnxs + 1, hnye - hnys + 1/))
            endif
        endif
    enddo
enddo
!$omp end do

!$omp master

call end_timer(t_local)
mpp_time_sync_unpack_mpi = mpp_time_sync_unpack_mpi + t_local

!$omp end master


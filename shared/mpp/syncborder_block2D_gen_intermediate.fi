!------------------------------------------------------------------------------
! Generic for 2D sync routine:
! subroutine syncborder_data2D_TYPE(domain, data2d)
!        type(data2D_real8_type), intent(inout) :: data2d
!        type(domain_type), intent(in) :: domain
!        ...
! end subroutine
!
! Must be specified: 
!   _MPI_TYPE_
!
!------------------------------------------------------------------------------

integer :: reqst
integer :: dir, k, kk, i, ierr
integer :: sync_dir(8)
integer :: k_dir(8)
integer :: rank_dir(8)
integer :: nxs, nxe, nys, nye     ! Boundary points
integer :: hnxs, hnxe, hnys, hnye ! Halo points
integer :: buf_size
integer :: rk                     ! Local index of buffers for rank, see sync_map_rank
integer :: val

real(wp8) :: t_local

!$omp master

! Wait all
!

call start_timer(t_local)

if (sync_tag == 1) then
    if (mpp_max_count_sync_send_recv == 0) mpp_max_count_sync_send_recv = sync_count_send_recv
    if (mpp_min_count_sync_send_recv == 0) mpp_min_count_sync_send_recv = sync_count_send_recv

    if (mpp_max_count_sync_send_recv < sync_count_send_recv) mpp_max_count_sync_send_recv = sync_count_send_recv
    if (mpp_min_count_sync_send_recv > sync_count_send_recv) mpp_min_count_sync_send_recv = sync_count_send_recv

    call mpi_waitall(sync_count_send_recv, sync_requests, sync_statuses, ierr)
    sync_count_send_recv = 0
endif

call end_timer(t_local)
mpp_time_sync_wait = mpp_time_sync_wait + t_local

! Unpack MPI buffers
!

call start_timer(t_local)

do rk = 1, domain%amount_of_ranks_near
    i = 1
    do while (i <= sync_buf_pos(rk) - 1)
        ! Unpack direction and block number
        val = int(_SYNC_RECV_BUF_(i, rk, sync_tag))
        k = val / 10
        dir = MOD(val, 10)
        i = i + 1
        !dir = _SYNC_RECV_BUF_(i, rk, sync_tag)
        !i = i + 1
        !k = _SYNC_RECV_BUF_(i, rk, sync_tag)
        !i = i + 1

        ! Get halo area
        call get_halo_points_of_block(domain, k, dir, hnxs, hnxe, hnys, hnye)

        ! Unpack buffer
        buf_size = (hnxe - hnxs + 1)*(hnye - hnys + 1)
        data2d%block(k)%field(hnxs : hnxe, hnys : hnye) = reshape(_SYNC_RECV_BUF_(i : i + buf_size - 1, rk, sync_tag), shape=(/hnxe - hnxs + 1, hnye - hnys + 1/))
        i = i + buf_size
    end do
enddo

call end_timer(t_local)
mpp_time_sync_unpack_mpi = mpp_time_sync_unpack_mpi + t_local

!$omp end master


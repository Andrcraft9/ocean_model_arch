! Base OMP

! User defines:
!-----------------------------------------------------------------------------!
! Possible user defines, you can configure it from makefile:
!   #define _MPP_KERNEL_TIMER_ON_
!   #define _MPP_SORTED_BLOCKS_
!       Load balancing for OMP threads, sort blocks which works faster with use schedule(static, 1)
!   #define _MPP_NO_PARALLEL_MODE_
!       No OMP
!   #define _MPP_BLOCK_MODE_
!       OMP loops for blocks
!   #define _MPP_HYBRID_BLOCK_MODE_
!       OMP loops for inner blocks and boundary blocks, overlap computation with communication, hide boundary blocks sync
!-----------------------------------------------------------------------------!
! Debug defines:
!   #define _DBG_MEM_PROFILE_
!       print total memory allocations

#define _MPP_SORTED_BLOCKS_
#define _MPP_BLOCK_MODE_
#define _OMP_MAX_THREADS_ 128
#define _MPP_MAX_SIMUL_SYNCS_ 1

!#define _DBG_MEM_PROFILE_

!#define _GPU_MODE_
!#define _GPU_FULL_
!#define _GPU_ASYNC_

!#define _GPU_CPU_HETERO_
#define _CPU_GPU_RATIO_ 0.25

!-----------------------------------------------------------------------------!
! System Defines:
!-----------------------------------------------------------------------------!

!-----------------------------------------------------------------------------!
#ifdef _GPU_MODE_

#define _GPU_BLOCK_X_ 16
#define _GPU_BLOCK_Y_ 16

#endif

#ifdef _MPP_NO_PARALLEL_MODE_

#define _OMP_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_BLOCKS_PARALLEL_END_ 

#endif

!-----------------------------------------------------------------------------!
#ifdef _MPP_HYBRID_BLOCK_MODE_
! MPP_HYBRID_BLOCK_MODE

#define _OMP_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BLOCKS_PARALLEL_END_ !$omp end parallel do

#endif

!-----------------------------------------------------------------------------!
#ifdef _MPP_BLOCK_MODE_
! MPP_BLOCK MODE

#define _OMP_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BLOCKS_PARALLEL_END_ !$omp end parallel do

#endif

!-----------------------------------------------------------------------------!
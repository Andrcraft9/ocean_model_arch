! Base OMP

! User defines:
!-----------------------------------------------------------------------------!
! Possible user defines, you can configure it from makefile
!#define _MPP_KERNEL_TIMER_ON_
!#define _MPP_SORTED_BLOCKS_
!#define _MPP_NO_PARALLEL_MODE_
!#define _MPP_BLOCK_MODE_
!#define _MPP_HYBRID_BLOCK_MODE_
!#define _MPP_LOOP_KERNEL_MODE_


#define _MPP_SORTED_BLOCKS_
#define _MPP_HYBRID_BLOCK_MODE_
#define _OMP_MAX_THREADS_ 128
!-----------------------------------------------------------------------------!

! Defines:
!-----------------------------------------------------------------------------!

#define _OMP_BARRIER_ !$omp barrier
#define _OMP_MASTER_BEGIN_ !$omp master
#define _OMP_MASTER_END_ !$omp end master
#define _OMP_SINGLE_BEGIN_ !$omp single
#define _OMP_SINGLE_END_ !$omp end single

!-----------------------------------------------------------------------------!
#ifdef _MPP_NO_PARALLEL_MODE_

#define _OMP_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_BLOCKS_PARALLEL_END_ 

#define _OMP_INNER_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_INNER_BLOCKS_PARALLEL_END_ 

#define _OMP_BOUNDARY_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_BOUNDARY_BLOCKS_PARALLEL_END_ 

#define _OMP_KERNEL_PARALLEL_BEGIN_ 
#define _OMP_KERNEL_PARALLEL_END_ 

#endif

!-----------------------------------------------------------------------------!
#ifdef _MPP_HYBRID_BLOCK_MODE_
! MPP_HYBRID_BLOCK_MODE

#define _OMP_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_INNER_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_INNER_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_BOUNDARY_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BOUNDARY_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_KERNEL_PARALLEL_BEGIN_ 
#define _OMP_KERNEL_PARALLEL_END_ 

#endif


!-----------------------------------------------------------------------------!
#ifdef _MPP_BLOCK_MODE_
! MPP_BLOCK MODE

#define _OMP_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_INNER_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_INNER_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_BOUNDARY_BLOCKS_PARALLEL_BEGIN_ !$omp parallel do schedule(static, 1) default(shared) private(k)
#define _OMP_BOUNDARY_BLOCKS_PARALLEL_END_ !$omp end parallel do

#define _OMP_KERNEL_PARALLEL_BEGIN_ 
#define _OMP_KERNEL_PARALLEL_END_ 

#endif

!-----------------------------------------------------------------------------!
#ifdef _MPP_LOOP_KERNEL_MODE_
! MPP_LOOP_KERNEL_MODE

#define _OMP_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_BLOCKS_PARALLEL_END_ 

#define _OMP_INNER_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_INNER_BLOCKS_PARALLEL_END_ 

#define _OMP_BOUNDARY_BLOCKS_PARALLEL_BEGIN_ 
#define _OMP_BOUNDARY_BLOCKS_PARALLEL_END_ 

#define _OMP_KERNEL_PARALLEL_BEGIN_ !$omp parallel do private(m, n)
#define _OMP_KERNEL_PARALLEL_END_ !$omp end parallel do

#endif

!-----------------------------------------------------------------------------!